{
	"info": {
		"_postman_id": "26526985-c95d-4824-832d-ed8d62983ed7",
		"name": "API Category Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "test GET 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Check that returned schema has data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"data\")).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3030/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "search GET 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Find ID 1234\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"id\")).to.be.true;\r",
							"    pm.expect(jsonData.hasOwnProperty(\"id\")).to.be.true;\r",
							"    pm.expect(jsonData.id).eql(\"1234\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3030/categories/1234",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories",
						"1234"
					]
				}
			},
			"response": []
		},
		{
			"name": "search GET 200 partial category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Find ID 1234\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"id\")).to.be.true;\r",
							"    pm.expect(jsonData.hasOwnProperty(\"id\")).to.be.true;\r",
							"    pm.expect(jsonData.id).eql(\"1234\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3030/categories/1234",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories",
						"1234"
					]
				}
			},
			"response": []
		},
		{
			"name": "search GET 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Search for non-existing ID 1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"name\")).to.be.true;\r",
							"    pm.expect(jsonData.name).eql(\"NotFound\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3030/categories/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "search - LIMIT - GET 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Use Limit only\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"limit\")).to.be.true;\r",
							"    pm.expect(jsonData.limit).eql(1);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"skip\")).to.be.true;\r",
							"    pm.expect(jsonData.skip).eql(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3030/categories?$limit=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories"
					],
					"query": [
						{
							"key": "$limit",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "search - LIMIT and SKIP - GET 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Test Pagination\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"limit\")).to.be.true;\r",
							"    pm.expect(jsonData.data.length).eql(10);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"skip\")).to.be.true;\r",
							"    pm.expect(jsonData.skip).eql(5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3030/categories?$limit=10&$skip=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories"
					],
					"query": [
						{
							"key": "$limit",
							"value": "10"
						},
						{
							"key": "$skip",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "search - SKIP - GET 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Use skip only\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"limit\")).to.be.true;\r",
							"    pm.expect(jsonData.limit).eql(10);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"skip\")).to.be.true;\r",
							"    pm.expect(jsonData.skip).eql(100);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3030/categories?$skip=100",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories"
					],
					"query": [
						{
							"key": "$skip",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "search - LIMIT - GET 500",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"pm.test(\"Use limit with string as value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"name\")).to.be.true;\r",
							"    pm.expect(jsonData.name).eql(\"GeneralError\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3030/categories?$limit=asd",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories"
					],
					"query": [
						{
							"key": "$limit",
							"value": "asd"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post non unique ID - 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Id must be unique\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"errors\")).to.be.true;\r",
							"    pm.expect(jsonData.errors[0].message).eql(\"id must be unique\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Abdool\",\r\n    \"id\":\"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3030/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post  - 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Add new Id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"name\")).to.be.true;\r",
							"    pm.expect(jsonData.name).eql(\"Abdool\");\r",
							"    pm.expect(jsonData.hasOwnProperty(\"id\")).to.be.true;\r",
							"    pm.expect(jsonData.id).eql(\"1237\");\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedAt\")).to.be.true;\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedAt\")).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Abdool\",\r\n    \"id\":\"1237\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3030/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Category 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Delete using existing ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"name\")).to.be.true;\r",
							"    pm.expect(jsonData.name).eql(\"Abdool\");\r",
							"    pm.expect(jsonData.hasOwnProperty(\"id\")).to.be.true;\r",
							"    pm.expect(jsonData.id).eql(\"1237\");\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedAt\")).to.be.true;\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdAt\")).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3030/categories/1234",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories",
						"1234"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Category 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Delete using non existing ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"name\")).to.be.true;\r",
							"    pm.expect(jsonData.name).eql(\"NotFound\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3030/categories/123487",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories",
						"123487"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Category 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Edit category using existing ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"id\")).to.be.true;\r",
							"    pm.expect(jsonData.id).eql(\"1234\");\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedAt\")).to.be.true;\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdAt\")).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"EDIT MOIasd\",\r\n    \"id\":\"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3030/categories/1234",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories",
						"1234"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Category non exiting ID 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Edit using non existing ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"name\")).to.be.true;\r",
							"    pm.expect(jsonData.name).eql(\"NotFound\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"EDIT MOI\",\r\n    \"id\":\"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3030/categories/12334",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3030",
					"path": [
						"categories",
						"12334"
					]
				}
			},
			"response": []
		}
	]
}